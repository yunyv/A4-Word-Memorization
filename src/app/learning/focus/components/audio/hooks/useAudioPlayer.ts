import { useCallback, useRef, useEffect, useState } from 'react';
import { WordDefinitionData } from '@/types/learning';

interface UseAudioPlayerProps {
  autoPlayAudio: boolean;
  hasUserInteraction: boolean;
}

export function useAudioPlayer({ autoPlayAudio, hasUserInteraction }: UseAudioPlayerProps) {
  const [isAudioPlaying, setIsAudioPlaying] = useState(false);
  const [isAudioLoading, setIsAudioLoading] = useState(false);
  const autoPlayAudioRef = useRef<HTMLAudioElement | null>(null);
  const audioAbortControllerRef = useRef<AbortController | null>(null);

  // Ëá™Âä®Êí≠ÊîæÈü≥È¢ëÂáΩÊï∞
  const playAutoAudio = useCallback((pronunciationData: WordDefinitionData['pronunciationData'], userInteraction: boolean = false) => {
    console.log('üéµ Èü≥È¢ëÊí≠ÊîæËØ∑Ê±Ç:', {
      autoPlayAudio,
      hasUserInteraction,
      userInteraction,
      pronunciationData: pronunciationData ? 'Â≠òÂú®' : '‰∏çÂ≠òÂú®'
    });

    if (!autoPlayAudio || !pronunciationData) {
      console.log('‚ùå Èü≥È¢ëÊí≠ÊîæË¢´ÊãíÁªù: Ëá™Âä®Êí≠ÊîæËÆæÁΩÆÊàñÂèëÈü≥Êï∞ÊçÆ‰∏çÂ≠òÂú®');
      return;
    }

    // Â¶ÇÊûúÊ≤°ÊúâÁî®Êà∑‰∫§‰∫í‰∏î‰∏çÊòØÁõ¥Êé•Áî®Êà∑‰∫§‰∫íËß¶ÂèëÔºå‰∏çÊí≠ÊîæÈü≥È¢ë
    if (!hasUserInteraction && !userInteraction) {
      console.log('‚è≥ Á≠âÂæÖÁî®Êà∑‰∫§‰∫íÂêéÂÜçÊí≠ÊîæÈü≥È¢ë');
      return;
    }

    // Ëé∑ÂèñÈü≥È¢ëURLÔºåÊåâ‰ºòÂÖàÁ∫ßÊéíÂ∫è
    const americanUrl = pronunciationData?.american?.audioUrl;
    const britishUrl = pronunciationData?.british?.audioUrl;

    // È™åËØÅÈü≥È¢ëURLÁöÑÊúâÊïàÊÄß
    const isValidUrl = (url: string | undefined): boolean => {
      return Boolean(url && url.length > 0 && (url.startsWith('http://') || url.startsWith('https://') || url.startsWith('/')));
    };

    // Â∞ùËØïÁæéÂºèÂèëÈü≥ÔºåÂ¶ÇÊûúÊó†ÊïàÂàôÂ∞ùËØïËã±ÂºèÂèëÈü≥
    let audioUrl = null;
    if (isValidUrl(americanUrl)) {
      audioUrl = americanUrl;
      console.log('üá∫üá∏ ‰ΩøÁî®ÁæéÂºèÂèëÈü≥URL:', audioUrl);
    } else if (isValidUrl(britishUrl)) {
      audioUrl = britishUrl;
      console.log('üá¨üáß ‰ΩøÁî®Ëã±ÂºèÂèëÈü≥URL:', audioUrl);
    }

    if (!audioUrl) {
      console.log('‚ùå Êú™ÊâæÂà∞ÊúâÊïàÁöÑÈü≥È¢ëURL:', {
        americanUrl,
        britishUrl,
        pronunciationData
      });
      return;
    }

    // ÂÅúÊ≠¢‰πãÂâçÁöÑÈü≥È¢ëÂπ∂Ê∏ÖÁêÜ‰∫ã‰ª∂ÁõëÂê¨Âô®
    if (autoPlayAudioRef.current) {
      const oldAudio = autoPlayAudioRef.current;
      console.log('‚èπÔ∏è ÂÅúÊ≠¢‰πãÂâçÁöÑÈü≥È¢ë');
      oldAudio.pause();
      oldAudio.currentTime = 0;
      autoPlayAudioRef.current = null;
    }

    // ÂèñÊ∂à‰πãÂâçÁöÑ AbortController
    if (audioAbortControllerRef.current) {
      console.log('üö´ ÂèñÊ∂à‰πãÂâçÁöÑÈü≥È¢ëËØ∑Ê±Ç');
      audioAbortControllerRef.current.abort();
    }

    try {
      setIsAudioLoading(true);
      const audio = new Audio();
      autoPlayAudioRef.current = audio;

      // ÂàõÂª∫Êñ∞ÁöÑ AbortController
      const abortController = new AbortController();
      audioAbortControllerRef.current = abortController;

      // ËÆæÁΩÆÈü≥È¢ëÂ±ûÊÄß
      audio.preload = 'auto';
      audio.loop = true; // ËÆæÁΩÆ‰∏∫Âæ™ÁéØÊí≠ÊîæÔºåÂú®Èáä‰πâÈù¢ÊùøÊâìÂºÄÊúüÈó¥ÊåÅÁª≠Êí≠Êîæ

      // ÂÆö‰πâ‰∫ã‰ª∂Â§ÑÁêÜÂáΩÊï∞
      const handleCanPlay = () => {
        // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÁªèË¢´ÂèñÊ∂à
        if (abortController.signal.aborted) return;

        console.log('‚úÖ Èü≥È¢ëÂä†ËΩΩÂÆåÊàêÔºåÂáÜÂ§áÊí≠Êîæ:', audioUrl);
        setIsAudioLoading(false);

        // Â∞ùËØïÊí≠ÊîæÈü≥È¢ë
        const playPromise = audio.play();

        if (playPromise !== undefined) {
          playPromise
            .then(() => {
              if (!abortController.signal.aborted) {
                console.log('üéâ Èü≥È¢ëÊí≠ÊîæÊàêÂäü');
                setIsAudioPlaying(true);
              }
            })
            .catch(error => {
              if (!abortController.signal.aborted) {
                console.error('‚ùå Èü≥È¢ëÊí≠ÊîæÂ§±Ë¥•:', error);
                setIsAudioPlaying(false);
                setIsAudioLoading(false);
                if (error.name === 'NotAllowedError') {
                  console.log('üö´ ÊµèËßàÂô®ÈòªÊ≠¢‰∫ÜËá™Âä®Êí≠ÊîæÔºåÈúÄË¶ÅÁî®Êà∑‰∫§‰∫í');
                  // Â¶ÇÊûúÊòØÁî®Êà∑‰∫§‰∫íËß¶ÂèëÁöÑÊí≠ÊîæÔºåÂèØ‰ª•ÊòæÁ§∫ÊèêÁ§∫
                  if (userInteraction) {
                    console.log('‚ö†Ô∏è Âç≥‰ΩøÂú®Áî®Êà∑‰∫§‰∫íÂêé‰πüË¢´ÈòªÊ≠¢ÔºåÂèØËÉΩÈúÄË¶ÅËøõ‰∏ÄÊ≠•ÁöÑÁî®Êà∑Êìç‰Ωú');
                  }
                } else if (error.name === 'AbortError') {
                  console.log('‚èπÔ∏è Èü≥È¢ëÊí≠ÊîæË¢´‰∏≠Êñ≠:', error);
                } else if (error.name === 'NotSupportedError') {
                  console.error('üö´ Èü≥È¢ëÊ†ºÂºè‰∏çÊîØÊåÅ:', audioUrl);
                } else {
                  console.error('‚ùå Èü≥È¢ëÊí≠ÊîæÂèëÁîüÊú™Áü•ÈîôËØØ:', error);
                }
              }
            });
        }
      };

      // ÈîôËØØÂ§ÑÁêÜÂáΩÊï∞
      const handleError = (e: Event) => {
        // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÁªèË¢´ÂèñÊ∂à
        if (abortController.signal.aborted) return;

        const audioElement = e.target as HTMLAudioElement;
        const error = audioElement.error as MediaError;
        const errorCode = error?.code;
        const errorMessage = error?.message;

        console.error('‚ùå Èü≥È¢ëÂä†ËΩΩÂ§±Ë¥•:', {
          url: audioUrl,
          errorCode,
          errorMessage,
          networkState: audioElement.networkState,
          readyState: audioElement.readyState,
          error: error
        });

        setIsAudioPlaying(false);
        setIsAudioLoading(false);

        // Â¶ÇÊûúÊòØÁæéÂºèÂèëÈü≥Â§±Ë¥•ÔºåÂ∞ùËØïËã±ÂºèÂèëÈü≥
        if (audioUrl === americanUrl && britishUrl && isValidUrl(britishUrl)) {
          console.log('üîÑ Â∞ùËØï‰ΩøÁî®Ëã±ÂºèÂèëÈü≥‰Ωú‰∏∫Â§áÁî®:', britishUrl);

          // Êõ¥Êç¢Èü≥È¢ëÊ∫ê
          if (!abortController.signal.aborted) {
            audioElement.src = britishUrl;

            // ÈáçÊñ∞Ê∑ªÂä†‰∫ã‰ª∂ÁõëÂê¨Âô®
            audioElement.addEventListener('canplay', handleCanPlay, { once: true, signal: abortController.signal });
            audioElement.addEventListener('error', (e) => {
              if (!abortController.signal.aborted) {
                console.error('‚ùå Ëã±ÂºèÂèëÈü≥‰πüÂä†ËΩΩÂ§±Ë¥•:', britishUrl);
                autoPlayAudioRef.current = null;
              }
            }, { signal: abortController.signal });
          }
        } else {
          // Ê≤°ÊúâÂ§áÁî®ÈÄâÈ°πÔºåÊ∏ÖÁêÜÈü≥È¢ëÂØπË±°
          if (!abortController.signal.aborted) {
            console.log('üóëÔ∏è Ê≤°ÊúâÂ§áÁî®Èü≥È¢ëÈÄâÈ°πÔºåÊ∏ÖÁêÜÈü≥È¢ëÂØπË±°');
            autoPlayAudioRef.current = null;
          }
        }
      };

      // Ê∑ªÂä†‰∫ã‰ª∂ÁõëÂê¨Âô®Ôºå‰ΩøÁî® AbortController ÁöÑ signal
      audio.addEventListener('canplay', handleCanPlay, { once: true, signal: abortController.signal });
      audio.addEventListener('error', handleError, { signal: abortController.signal });

      // ËÆæÁΩÆÈü≥È¢ëÊ∫ê
      audio.src = audioUrl;

      // Â¶ÇÊûúÈü≥È¢ëÂ∑≤ÁªèÂèØ‰ª•Êí≠ÊîæÔºåÁ´ãÂç≥Â∞ùËØïÊí≠Êîæ
      if (audio.readyState >= 3 && !abortController.signal.aborted) { // HAVE_FUTURE_DATA
        handleCanPlay();
      }

    } catch (error) {
      console.error('ÂàõÂª∫Èü≥È¢ëÂØπË±°Â§±Ë¥•:', error);
      autoPlayAudioRef.current = null;
      setIsAudioLoading(false);
    }
  }, [autoPlayAudio, hasUserInteraction]);

  // ÂÅúÊ≠¢Ëá™Âä®Êí≠ÊîæÈü≥È¢ë
  const stopAutoAudio = useCallback(() => {
    if (autoPlayAudioRef.current) {
      const audio = autoPlayAudioRef.current;

      console.log('‚èπÔ∏è ÂÅúÊ≠¢Èü≥È¢ëÊí≠Êîæ');

      // ÂèñÊ∂àÊâÄÊúâ‰∫ã‰ª∂ÁõëÂê¨Âô®
      if (audioAbortControllerRef.current) {
        console.log('üö´ ÂèñÊ∂àÈü≥È¢ë‰∫ã‰ª∂ÁõëÂê¨Âô®');
        audioAbortControllerRef.current.abort();
        audioAbortControllerRef.current = null;
      }

      // ÂÅúÊ≠¢Êí≠Êîæ
      audio.pause();
      audio.currentTime = 0;

      // Ê∏ÖÁêÜÈü≥È¢ëÊ∫ê‰ª•ÈáäÊîæÂÜÖÂ≠ò
      audio.src = '';
      audio.load(); // Ëß¶ÂèëÂä†ËΩΩÁ©∫ÂÜÖÂÆπÔºåÁ°Æ‰øùÂÆåÂÖ®ÂÅúÊ≠¢

      // Ê∏ÖÁêÜÂºïÁî®ÂíåÁä∂ÊÄÅ
      autoPlayAudioRef.current = null;
      setIsAudioPlaying(false);
      setIsAudioLoading(false);
    }
  }, []);

  // Ê∏ÖÁêÜÈü≥È¢ëËµÑÊ∫ê
  useEffect(() => {
    return () => {
      stopAutoAudio();
      // Á°Æ‰øùÊ∏ÖÁêÜ AbortController
      if (audioAbortControllerRef.current) {
        audioAbortControllerRef.current.abort();
        audioAbortControllerRef.current = null;
      }
    };
  }, [stopAutoAudio]);

  return {
    isAudioPlaying,
    isAudioLoading,
    playAutoAudio,
    stopAutoAudio
  };
}